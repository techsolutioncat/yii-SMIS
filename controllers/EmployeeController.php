<?php

namespace app\controllers;

use Yii;
use app\models\User;
use app\models\EmployeeInfo;
use app\models\search\EmployeeInfoSearch;
use app\models\EmplEducationalHistoryInfo;
use app\models\EmployeeAttendance;
use app\models\Checkinout;
use app\models\SalaryMain;
use app\models\EmployeePayroll;
use app\models\RefProvince;
use app\models\RefDistrict;
use app\models\SalaryAllownces;
use app\models\RefCities;
use app\models\EmployeeSalarySelection;
use app\models\EmployeeAllowances;
use app\models\EmployeeDeductions;
use app\models\SalaryPayStages;
use app\models\EmployeeSalaryDeductionDetail;
use app\models\RefGroup;
use app\models\SalaryDeductionType;
use app\models\SalaryPayGroups;
use app\models\RefDesignation;
use app\models\RefSection;
use app\models\EmployeeParentsInfo;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\data\ActiveDataProvider;
use yii\web\UploadedFile;
use kartik\mpdf\Pdf;
use mPDF;
use arogachev\yii2Excel;
use app\models\search\EmplEducationalHistoryInfoSearch;



/**
 * EmployeeInfoController implements the CRUD actions for EmployeeInfo model.
 */
class EmployeeController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    
    //===== employee attendance Report===//
    
    public function actionEmplAttndReport(){
        $searchModel = new EmployeeInfoSearch();
        $searchModel->fk_branch_id = Yii::$app->common->getBranch();
        $searchModel->is_active=1;
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        return $this->render('employe-attendance-report', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }
    
    //===== end of employee attendance Report===//

   ///pdf
    public function actionTest(){
        return $this->renderAjax('test');
    }
    
    public function actionChart(){
        return $this->render('chart');
    }

    public function actionGetDesignation(){
     $id=yii::$app->request->post('id');
      $destination=RefDesignation::find()->where(['fk_department_id'=>$id,'fk_branch_id'=>yii::$app->common->getBranch()])->All();
      //echo '<pre>';print_r($destination);
      $option="<option>Select Designation</option>";
      foreach ($destination as $des) {
       $option.= "<option value='".$des->designation_id."'>".$des->Title."</option>";
      }
      return $option;
    }

    public function actionCreateMpdf($id){
        $this->layout = 'pdf';
         $mpdf=new mPDF();
         $model2= EmplEducationalHistoryInfo::findOne(['emp_id'=>$id]); 
         $mpdf->WriteHTML($this->render('generatePdf', [
            'model' => $this->findModel($id),
            'model2'=>$model2
          ]));

         $mpdf->Output();



        // $mpdf=new mPDF();
        // $mpdf->WriteHTML($this->renderPartial('mpdf'));
        // $mpdf->Output();
        // //$mpdf->Output('MyPDF.pdf', 'D'); //for force downloading
        // exit;
        //return $this->renderPartial('mpdf');
    }

    public function actionMpdfDemo1() {
    $pdf = new pdf([
        'mode' => pdf::MODE_CORE, // leaner size using standard fonts
        'content' => $this->renderPartial('mpdf'),
        'options' => [
            'title' => 'Privacy Policy - Krajee.com',
            'subject' => 'Generating PDF files via yii2-mpdf extension has never been easy'
        ],
        'methods' => [
            'SetHeader' => ['Generated By: Krajee Pdf Component||Generated On: ' . date("r")],
            'SetFooter' => ['|Page {PAGENO}|'],
        ]
    ]);
            return $pdf->render();
        }

    /////////////excel

    public function actionExport() {
        $searchModel = new EmployeeInfoSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        ExcelView::widget([
            'dataProvider' => $dataProvider,
            'filterModel' => $searchModel,
            'fullExportType'=> 'xlsx', //can change to html,xls,csv and so on
            'grid_mode' => 'export',
            'columns' => [
                ['class' => 'yii\grid\SerialColumn'],
                'code',
                'name',
                'population',
              ],
        ]);
    }


    ///////////end of excel

public function actionReport() {
    // get your HTML raw content without any layouts or scripts
    $content = $this->renderPartial('mpdf');
 
    // setup kartik\mpdf\Pdf component
    $pdf = new Pdf([
        // set to use core fonts only
        'mode' => Pdf::MODE_CORE, 
        // A4 paper format
        'format' => Pdf::FORMAT_A4, 
        // portrait orientation
        'orientation' => Pdf::ORIENT_PORTRAIT, 
        // stream to browser inline
        'destination' => Pdf::DEST_BROWSER, 
        // your html content input
        'content' => $content,  
        // format content from your own css file if needed or use the
        // enhanced bootstrap css built by Krajee for mPDF formatting 
        'cssFile' => '@vendor/kartik-v/yii2-mpdf/assets/kv-mpdf-bootstrap.min.css',
        // any css to be embedded if required
        'cssInline' => '.kv-heading-1{font-size:18px}', 
         // set mPDF properties on the fly
        'options' => ['title' => 'Krajee Report Title'],
         // call mPDF methods on the fly
        'methods' => [ 
            'SetHeader'=>['Krajee Report Header'], 
            'SetFooter'=>['{PAGENO}'],
        ]
    ]);
 
    // return the pdf output as per the destination setting
    return $pdf->render(); 
}


    ///end of pdf

    public function actionCalendar(){
        $attendanceModel = new EmployeeAttendance();
        return $this->render('/employee/calendar', ['attendanceModel' => $attendanceModel]);
    }

    
    public function actionSaveEmpId(){

         $ids=Yii::$app->request->post('emp_is');
         $dat=Yii::$app->request->post('d');
         $dats= date('Y-m-d',strtotime($dat));
          $query=EmployeeAttendance::find()->where(['fk_empl_id'=>$ids]) 
            ->andWhere(['between', 'date', $dats.' 00:00:00', $dats.' 23:59:59'])
            ->one();

            $query1=EmployeeAttendance::find()->where(['fk_empl_id'=>$ids]) 
            ->andWhere(['between', 'date', $dats.' 00:00:00', $dats.' 23:59:59']);
            $provider = new ActiveDataProvider([
                'query' => $query1,
            ]);

            if($query){
                 $getVal= $this->renderAjax('getdetails', ['passvalue' => $provider]);
                 return json_encode(['type'=>$query->leave_type,'remarks'=>$query->remarks,'newprovide'=>$getVal]);

            }else{
                return 'false';
            }

    }//end of empId



    public function actionSaveLeave(){
       $post_date= date('Y-m-d',strtotime($_POST['getDate']));
       $post_emp=$_POST['employee'];
       $exists=EmployeeAttendance::find()->where(['fk_empl_id'=>$post_emp]) 
       ->andWhere(['between', 'date', $post_date.' 00:00:00', $post_date.' 23:59:59'])
       ->one();
    
       if(count($exists) > 0){
        $model = EmployeeAttendance::findOne($exists->id);
       }else{
            $model = new EmployeeAttendance();
        }
 
       $model->fk_empl_id=$_POST['employee'];
       $model->leave_type=$_POST['select'];
       $model->remarks=$_POST['remark'];
       $model->date=$_POST['getDate'];

        if($model->save()){
            //echo 'saved';
            $get_leave_type=$model->leave_type;
            if($get_leave_type == 'absent'){
                echo '<span style="color:red">A</span>';
            }else if($get_leave_type == 'leave'){
                echo '<span style="color:green">L</span>';
            }else if($get_leave_type == 'latecomer'){
               echo '<span style="color:red">LC</span>';

            }else if($get_leave_type == 'present'){
                echo '<span style="color:green">P</span>';
            }else if($get_leave_type == 'shortleave'){
                echo '<span style="color:red">SL</span>';
            }
       }else{
            print_r($model->getErrors());
       } 
       } // end of 


      

    public function actionFunctions(){
      
        return $this->renderAjax('EmpCalfunctions');
        
    }


    // country
    public function actionCountry(){
    
        $id=Yii::$app->request->post('id');
        $provinces= RefProvince::find()->where(['country_id'=>$id])->all();
     
        echo "<option selected='selected'>Select Provinces</option>";
        foreach($provinces as $province)
        {
            echo "<option value='".$province->province_id."'>".$province->province_name."</option>";
            
        }
    
   }//end of country 

    public function actionProvince(){
    
        $id=Yii::$app->request->post('id');
        $District=RefDistrict::find()->where(['province_id'=>$id])->all();
     
    echo "<option selected='selected'>Select District</option>";
    foreach($District as $district)
    {
        
            echo "<option value='".$district->district_id."'>".$district->District_Name."</option>";
        
    }
    

    }//end of Province 

    public function actionDistrict(){
    
        $id=Yii::$app->request->post('id');
        $city=RefCities::find()->where(['district_id'=>$id])->all();
     
    echo "<option selected='selected'>Select City</option>";
    foreach($city as $city)
    {
        
            echo "<option value='".$city->city_id."'>".$city->city_name."</option>";
        
    }
    

    }//end of District


    /**
     * Lists all EmployeeInfo models.
     * @return mixed
     */
    public function actionExcel()
    {
        $searchModel = new EmployeeInfoSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->renderPartial('excel', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionIndex()
    {
        $searchModel = new EmployeeInfoSearch();
        $searchModel->fk_branch_id = Yii::$app->common->getBranch();
        $searchModel->is_active=1;
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionSalaryPay(){
      $id=Yii::$app->request->post('id');
     $exist=SalaryMain::find()->where(['fk_emp_id'=>$id])->one();

     $employeeLeaveCount=EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'leave'])->all();
     $employeelatecomingCount=EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'latecomer'])->all();
     $employeeslCount=EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'shortleave'])->all();
     $employeeabsentCount=EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'absent'])->all();
     //$employeeslCount = \app\models\EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'shortleave']);

    // echo count($employeeslCount);die;
      if(count($exist)>0){
            //$e=$exist->fk_emp_id;
           $c_date=date('m');
           $mon=date('m',strtotime($exist->salary_month));
           if($c_date == $mon){
            $exist= 'This Employee Has Already Been Taken Salary This Month';

           }

          }

     $employee_payroll = EmployeePayroll::find()->where(['fk_emp_id'=>$id])->one();
     $emply_alwnc = EmployeeAllowances::find()->where(['fk_emp_id'=>$id,'status'=>1])->All();
     $payrollDeduction = EmployeeDeductions::find()->select(['fk_deduction_id'])->where(['fk_emp_id'=>$id,'status'=>1])->All();
     $basic=$employee_payroll->basic_salary;
     $gross=$employee_payroll->total_amount;
     $stageId=$employee_payroll->fk_pay_stages;
     $group=$employee_payroll->fkGroup->title;
     $stage=$employee_payroll->fkPayStages->title;
     $total_alwnc=$employee_payroll->total_allownce;
     $total_deducn=$employee_payroll->total_deductions;
     
     $salaryView=$this->renderAjax('salary-pay',['basic'=>$basic,'gross'=>$gross,'total_alwnc'=>$total_alwnc,'total_deducn'=>$total_deducn,'group'=>$group,'stage'=>$stage,'emply_alwnc'=>$emply_alwnc,'payrollDeduction'=>$payrollDeduction,'employeeLeaveCount'=>$employeeLeaveCount,'employeelatecomingCount'=>$employeelatecomingCount,'employeeslCount'=>$employeeslCount,'employeeabsentCount'=>$employeeabsentCount]);
     return json_encode(['salaryView'=>$salaryView,'gros'=>$gross,'stag'=>$stage,'stageId'=>$stageId,'basics'=>$basic,'exist'=>$exist]);
    // return json_encode(['basic'=>$basic]);


    }

    /**
     * Displays a single EmployeeInfo model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        //echo $id;die;
        //$searchModel = new EmplEducationalHistoryInfoSearch();
       // $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        
        $model2= EmplEducationalHistoryInfo::findOne(['emp_id'=>$id]); 
        $leave = EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'leave'])->all();
        $absent= EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'absent'])->all();
        //echo count($absent);die;
        $present = EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'present'])->all();
        $shortleave = EmployeeAttendance::find()->where(['fk_empl_id'=>$id,'leave_type'=>'shortleave'])->all();
        
        $query1=EmplEducationalHistoryInfo::find()->where(['emp_id'=>$id]);
            $dataProvider = new ActiveDataProvider([
                'query' => $query1,
            ]);
        
        return $this->render('view', [
            'model' => $this->findModel($id),
            'model2'=>$model2,
            'leave'=>$leave,
            'absent'=>$absent,
            'shortleave'=>$shortleave,
            'present'=>$present,
            //'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Creates a new EmployeeInfo model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */

    

    /*public function actionGetStageDetail(){
        $id=Yii::$app->request->post('id');
        $getDeduction=SalaryPayStages::find()->where(['id'=>$id])->one();
        $alwnc=SalaryAllownces::find()->where(['fk_stages_id'=>$id])->one();
        //echo $getDeduction->amount;
          return json_encode(['ammount'=>$getDeduction->amount,'alwnc'=>$alwnc->title]);
        
    }*/
    public function actionGetStageDetail(){

         $id=Yii::$app->request->post('id');
        $alwnc=SalaryAllownces::find()->where(['fk_branch_id'=>yii::$app->common->getBranch(),'status'=>1,'fk_stages_id'=>$id])->All();
        
       $allownce= "";
        foreach($alwnc as $alwnc)
        {
            $allownce.= "<option value='".$alwnc->id."'>".$alwnc->title."</option>";
            
        }
        //return $alonwnce;

        $salr=SalaryDeductionType::find()->where(['fk_stages_id'=>$id])->All();
        $sal= "";
        foreach($salr as $slr)
        {
            $sal.= "<option value='".$slr->id."'>".$slr->title."</option>";
            
        }


        $salr=SalaryPayStages::find()->select('amount')->where(['id'=>$id])->one();
        $stgamnt=$salr->amount;

        return Json_encode(['html'=>$allownce,'sal'=>$sal,'amnt'=>$stgamnt]);

        //return $allownce;
        
           
        
    }

    /* public function actionGetAllownce(){
           $id=Yii::$app->request->post('id');
           //print_r($id);
           $count=0;
           $stgeid=Yii::$app->request->post('stageid');
           $stagevalue= SalaryPayStages::find()->where(['id'=>$stgeid])->one();
           if(count($id)> 0){ 
            $renderView=$this->renderAjax('get-allownce',['stageid'=>$id,'stagevl'=>$stagevalue]);
          //echo $renderView;die;
           }else{
           //return $renderView;
            $renderView = 'Not Found';
           }
           return json_encode(['viewtable'=>$renderView]);
         
      }*/
       public function actionGetAllownce(){

           $alwncid=Yii::$app->request->post('alwncid');
           $deductid=Yii::$app->request->post('deductid');
           // print_r($deductid);die;
            $stageid=Yii::$app->request->post('stageid');

           $stagevalue= SalaryPayStages::find()->where(['fk_branch_id'=>yii::$app->common->getBranch(),'status'=>1,'id'=>$stageid])->one();
           $renderView=$this->renderAjax('get-allownce',[
            'stageid'=>$alwncid,
            'stagevl'=>$stagevalue,
            'deductions'=>$deductid
            ]);
           
           return json_encode(['viewtable'=>$renderView]);
         
      }

      public function actionGetDeduction(){
            $ids=Yii::$app->request->post('id');
            $gettotalAlwnc=Yii::$app->request->post('gettotalAlwnc');
           
            //$ids=explode(',',$id);
          $count=0;
          if(count($ids)> 0){ 
            $renderViews=$this->renderAjax('get-deduction',['stageid'=>$ids,'gettotalAlwnc'=>$gettotalAlwnc]);
          }else{
            $renderViews = 'Not Found';
          }
           return json_encode(['viewtables'=>$renderViews]);
         
          }



      /*public function actionGetDeduction(){
        $id=Yii::$app->request->post('id');
        $ids=explode(',',$id);
        $count=0;
       foreach ($ids as $ide) {
        $getDeduction=SalaryDeductionType::find()->where(['id'=>$ide])->sum('amount');
        $count= $count+$getDeduction;
       }
       return $count;
       }*/


      /*public function actionGetAllownce(){
          $id=Yii::$app->request->post('id');
           $ids=explode(',',$id);
           //$count=0;
          
          foreach ($ids as $ids) {
             $stageamount= SalaryAllownces::find()->where(['id'=>$ids])->All(); 
             foreach ($stageamount as $key) {
                 echo $key->amount;
             }
              
          }
         // return $count;
         // echo $stageamount->amount;
        
      }*/

  

    public function actionCreate()
    {

        $model = new EmployeeInfo();
        $model2 = new EmployeeParentsInfo();
        $usermodel = new User();
        $employeesalaryselection= new EmployeeAllowances();
        $employeesalarydeductiondetail= new EmployeeDeductions();
        $employeePayroll= new EmployeePayroll();
        //$model->scenario = 'create';
        /*assigning predefined values*/
        $model->marital_status=1;
        $model->gender_type=1;   
        $model2->gender=1;
        //$model->different_address=1;
        /*if(Yii::$app->request->post()){
            


          echo "<pre>"; print_r(Yii::$app->request->post());exit;
          
        }*/
        
      // print_r($_POST['EmployeeSalaryDeductionDetail']['fk_salary_deduction_type_id'][0]);die;
//print_r($salarydeduction= $_POST['EmployeeSalaryDeductionDetail']['fk_salary_deduction_type_id']);
//die;
        

        if ($usermodel->load(Yii::$app->request->post())){

          

           $salrySelectinGroup     = $_POST['EmployeeAllowances']['fk_allownces_id'];
           $salarydeduction        = $_POST['EmployeeDeductions']['fk_deduction_id'];
           $dfrntAdress=$_POST['EmployeeInfo']['different_address'];
          
           $file =$usermodel->Image= UploadedFile::getInstance($usermodel, 'Image');
          if($file){
             $usermodel->Image=$file; 
         }
           //$usermodel->Image->saveAs('uploads/' . $usermodel->Image->baseName . '.' . $usermodel->Image->extension);
               
           

            $random_password= Yii::$app->getSecurity()->generateRandomString($length = 7);
            $usermodel->setPassword($random_password);
            $usermodel->generateAuthKey();
            $usermodel->fk_branch_id=Yii::$app->common->getBranch();
            $usermodel->fk_role_id=4;
            $usermodel->status='active';

            if($usermodel->save()){
                 if(!empty($file)){
                 $file->saveAs(\Yii::$app->basePath . '/uploads/'.$file);
                }
                $user_id = $usermodel->id;
                if ($model->load(Yii::$app->request->post())){
                    $model->user_id=$usermodel->id;
                    $model->fk_branch_id=Yii::$app->common->getBranch();
                    $model->is_active =1;
                    if($dfrntAdress == 1){
                         $model->fk_ref_country_id2=$_POST['EmployeeInfo']['fk_ref_country_id22'];
                         $model->fk_ref_province_id2=$_POST['EmployeeInfo']['fk_ref_province_id22'];
                         $model->fk_ref_district_id2=$_POST['EmployeeInfo']['fk_ref_district_id22'];
                         $model->fk_ref_city_id2=$_POST['EmployeeInfo']['fk_ref_city_id22'];
                    }
                    if($model->save()){

                      //insert payroll group and stage id
                        if ($employeePayroll->load(Yii::$app->request->post())){
                           $empoyee_payrol         = Yii::$app->request->post('EmployeePayroll');
                          // print_r($empoyee_payrol);die;
                           $empoyee_deductns_pyroll= $empoyee_payrol['total_amount'];
                           $b_sal=$empoyee_payrol['basic_salary'];
                           $t_alwnc=$empoyee_payrol['total_allownce'];
                           $t_dedu=$empoyee_payrol['total_deductions'];

                           
                           $totl_formula=$b_sal + $t_alwnc - $t_dedu;

                          // $employeAlwnc           = $empoyee_payrol['total_amountAllwnc'];

                           $employeePayroll->fk_emp_id=$model->emp_id;
                          //  echo $empoyee_deductns_pyroll;die;
                            
                            $employeePayroll->total_amount=$totl_formula;
                            $employeePayroll->created_date=date("Y:m:d H:i:s");

                            if($employeePayroll->save()){

                            }else{
                              print_r($employeePayroll->getErrors());die;
                            }
                       

                            } //end of deduction if post group and stage

                      // end of insert paryroll group and stage id

                        // insert deduction
                      if(!empty($salarydeduction)){
                       if ($employeesalarydeductiondetail->load(Yii::$app->request->post())){
                          
                       foreach($salarydeduction as $deduction){
                        $deductionmodel=new EmployeeDeductions();
                        $deductionmodel->fk_emp_id=$model->emp_id;
                        $deductionmodel->fk_payroll_id=$employeePayroll->id;
                        $deductionmodel->fk_deduction_id = $deduction;
                        $deductionmodel->created_date =date('Y:m:d H:i:s');
                        
                        if($deductionmodel->save()){


                            
                        }else{
                            print_r($deductionmodel->getErrors());die;
                        }
                       } // end of foreach

                            } //end of deduction if
                          }
                        //end of insert deduction
                        


                        // insert allownces
               if ($employeesalaryselection->load(Yii::$app->request->post())){
                if(!empty($salrySelectinGroup)){
               foreach($salrySelectinGroup as $grp){
                
                $mdls=new EmployeeAllowances();
                $mdls->fk_emp_id=$model->emp_id;
                $mdls->fk_payroll_id=$employeePayroll->id;
                $mdls->fk_allownces_id = $grp;
                $mdls->created_date=date('Y:m:d H:i:s');

                //$mdls->fk_fix_deduction_detail = $checkDeducn;
                
                if($mdls->save()){
                    
                }else{
                    print_r($mdls->getErrors());die;
                }
               
               }

                    } //end of salry if empty
                  }
                      //end of insert alownces

                    
                        
                        if ($model2->load(Yii::$app->request->post())){
                            $model2->emp_id=$model->emp_id;
                            if($model2->save()){
                                /*email will be composed here*/

                                    /*returning to the detail view of employe.*/
                            if(Yii::$app->request->post('submit')==='create_continue'){
                                //employe education info form. 
                                return $this->redirect(['education/create', 'id' => $model->emp_id]);
                            }else{
                                return $this->redirect(['employee/view', 'id' => $model->emp_id]);
                            }
                            }else{
                            //  print_r($model2->getErrors());die;
                                return $this->render('create', [
                            'model' => $model,
                            'model2' => $model2,
                            'usermodel' => $usermodel,
                            'employeesalaryselection' => $employeesalaryselection,
                            'employeesalarydeductiondetail' => $employeesalarydeductiondetail,
                            'employeePayroll' => $employeePayroll,
                                ]);
                            }
                         }
                    }else{
                         //print_r($model->getErrors());die;
                         return $this->render('create', [
                'model' => $model,
                'model2' => $model2,
                'usermodel' => $usermodel,
                'employeesalaryselection' => $employeesalaryselection,
                'employeesalarydeductiondetail' => $employeesalarydeductiondetail,
                'employeePayroll' => $employeePayroll,
            ]);
                    }
                }
            }else{
               // print_r($usermodel->getErrors());die;
                 return $this->render('create', [
                    'model' => $model,
                    'model2' => $model2,
                    'usermodel' => $usermodel,
                    'employeesalaryselection' => $employeesalaryselection,
                    'employeesalarydeductiondetail' => $employeesalarydeductiondetail,
                    'employeePayroll' => $employeePayroll,
                ]);
                //return $this->redirect(['create', 'id' => $model->emp_id]);
            }

        } else {
          // print_r($model->getErrors());die;
            return $this->render('create', [
                'model' => $model,
                'model2' => $model2,
                'usermodel' => $usermodel,
                'employeesalaryselection' => $employeesalaryselection,
                'employeesalarydeductiondetail' => $employeesalarydeductiondetail,
                'employeePayroll' => $employeePayroll,
            ]);
        }
    }

    /**
     * Updates an existing EmployeeInfo model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
   public function actionUpdate($id)
    {
        if (Yii::$app->user->isGuest) {
            return $this->goHome();
        }

         /*if(Yii::$app->request->post()){

        
            echo "<pre>";print_r(Yii::$app->request->post());exit;
           //echo "<pre>";print_r($_POST['EmployeeDeductions']['fk_deduction_id']);
        die;
        }*/

       
        $model = $this->findModel($id);
        $usermodel=User::find()->where(['id'=>$model->user_id])->one();

        $model2=EmployeeParentsInfo::find()->where(['emp_id'=>$id])->one();

        $employeePayroll=EmployeePayroll::find()->where(['fk_emp_id'=>$id])->one();
        if(count($employeePayroll) == 0){
        $employeePayroll=new EmployeePayroll();

        }

        /*$employeesalaryselection=EmployeeAllowances::find()->where(['fk_emp_id'=>$id])->one();
        $employeesalarydeductiondetail=EmployeeDeductions::find()->where(['fk_emp_id'=>$id])->one();
*/
         $employeesalaryselection = new EmployeeAllowances();
         $employeesalarydeductiondetail = new EmployeeDeductions();
        
        // if(Yii::$app->request->post()){
        //   if(count($employeesalaryselection) == 0){
        //     $employeesalaryselection=new EmployeeAllowances();
        //     $employeesalaryselection->fk_allownces_id=''; 
        //     $employeesalaryselection->fk_emp_id=$id; 

        //   }   
        // }

       //$empId= $employeesalaryselection->fk_emp_id;
       //$stagesId= $employeesalaryselection->fk_pay_stages;
       

        
       // echo '<pre>';print_r($employeesalaryselection);die;
        

        //$empId_deduction= $employeesalarydeductiondetail->fk_emp_id;
        //$stagesIdDeduct= $employeesalarydeductiondetail->fk_pay_stages;

        

        $old_image=$usermodel->Image;
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
        $employeesalaryselection=EmployeeAllowances::find()->where(['fk_emp_id'=>$id])->one();

          if(count($employeesalaryselection) > 0){
            $employeesalaryselection = EmployeeAllowances::findOne($employeesalaryselection->id);

        }else{
            $employeesalaryselection = new EmployeeAllowances();

        }

        if(count($employeesalarydeductiondetail)>0){
            $employeesalarydeductiondetail = EmployeeDeductions::findOne($employeesalarydeductiondetail->id);
        }else{
            $employeesalarydeductiondetail = new EmployeeDeductions();
        }
           
            $salrySelectinGroup= $_POST['EmployeeAllowances']['fk_allownces_id'];
            $salarydeduction= $_POST['EmployeeDeductions']['fk_deduction_id'];
            $update_allownces_status = "UPDATE employee_allowances  SET status = 0 WHERE fk_emp_id =".$id;

            $update_deduction_status = "UPDATE employee_deductions  SET status = 0 WHERE fk_emp_id =".$id;
        \Yii::$app->db->createCommand($update_allownces_status)->execute();
        \Yii::$app->db->createCommand($update_deduction_status)->execute();
            if($usermodel->load(Yii::$app->request->post())){
               if(!empty($_FILES['User']['name']['Image'])){
                 
                 $file =UploadedFile::getInstance($usermodel, 'Image');

                 $file->saveAs(\Yii::$app->basePath . '/uploads/'.$file);
                 $usermodel->Image=$file;
                }else{
                    $usermodel->Image=$old_image;
                }

               // $usermodel->status=1;
               if($usermodel->save(false)){
                if($model2->load(Yii::$app->request->post())){
                    $model2->save();
                if($employeePayroll->load(Yii::$app->request->post())){
                           $empoyee_payrol=Yii::$app->request->post('EmployeePayroll');
                           $empoyee_deductns_pyroll= $empoyee_payrol['total_amount'];
                           $b_sal=$empoyee_payrol['basic_salary'];
                           $t_alwnc=$empoyee_payrol['total_allownce'];
                           $t_dedu=$empoyee_payrol['total_deductions'];
                           $totl_formula=$b_sal + $t_alwnc - $t_dedu;
                           $employeePayroll->total_amount=$totl_formula;
                           $employeePayroll->created_date=date("Y:m:d H:i:s");
                           $employeePayroll->fk_emp_id=$model->emp_id;
                    if($employeePayroll->save()){}else{print_r($employeePayroll->getErrors());}
                  }
               }

               //salary
                
               if(!empty($salrySelectinGroup)){ 
               foreach($salrySelectinGroup as $grp){
                $employeesalaryselectionUpdate = EmployeeAllowances::find()->where(['fk_allownces_id'=>$grp,'fk_emp_id'=>$id])->one();
                if(count($employeesalaryselectionUpdate) == 0){
              $employeesalaryselectionUpdate = new EmployeeAllowances();
             $employeesalaryselectionUpdate->fk_payroll_id=$employeePayroll->id;

              $employeesalaryselectionUpdate->fk_emp_id=$model->emp_id;
              $employeesalaryselectionUpdate->fk_allownces_id = $grp;
              $employeesalaryselectionUpdate->created_date=date('Y:m:d H:i:s');
              $employeesalaryselectionUpdate->status=1;                
                }else{
                  $employeesalaryselectionUpdate->status=1;
                     }
                //print_r($grp);die;
               // $mdls=new EmployeeAllowances();
                

                //$mdls->fk_fix_deduction_detail = $checkDeducn;
                
                if($employeesalaryselectionUpdate->save()){
                    
                }else{
                    print_r($employeesalaryselectionUpdate->getErrors());die;
                }
               
               }//end of foreach
            }// end of if

                        // insert deduction
               //print_r($salarydeduction);die;
                        if(!empty($salarydeduction)){
                       foreach($salarydeduction as $deduction){
               //print_r($deduction);die;

                       $employeesalaryDeductionUpdate = EmployeeDeductions::find()->where(['fk_deduction_id'=>$deduction,'fk_emp_id'=>$id])->one();
               //print_r($employeesalaryDeductionUpdate);die;

                    

                        if(count($employeesalaryDeductionUpdate) == 0){
                        $employeesalaryDeductionUpdate = new EmployeeDeductions();
                        $employeesalaryDeductionUpdate->fk_payroll_id=$employeePayroll->id;
                        $employeesalaryDeductionUpdate->fk_emp_id=$model->emp_id;
                        $employeesalaryDeductionUpdate->fk_deduction_id = $deduction;
                        
                        //$deductionmodel->amount = $_POST['EmployeeDeductions']['amount'];
                        $employeesalaryDeductionUpdate->created_date =date('Y:m:d H:i:s');
                        $employeesalaryDeductionUpdate->updated_date =date('Y:m:d H:i:s');
                        $employeesalaryDeductionUpdate->status =1;
                        }else{
                        $employeesalaryDeductionUpdate->status =1;

                        }


                        
                        
                        if($employeesalaryDeductionUpdate->save()){


                            
                        }else{
                            print_r($employeesalaryDeductionUpdate->getErrors());die;
                        }
                       }// end of foreach

                     }

                            
                        //end of insert deduction


                    
               //end of salary

               }else{
                //print_r($usermodel->getErrors());die;
               }
             }
            return $this->redirect(['view', 'id' => $model->emp_id]);
        } else {
            //print_r($model->getErrors());die;
            return $this->render('update', [
                'model' => $model,
                'model2' => $model2,
                'usermodel' => $usermodel,
                'employeesalaryselection'=>$employeesalaryselection,
                'employeesalarydeductiondetail'=>$employeesalarydeductiondetail,
                'employeePayroll' => $employeePayroll,


            ]);
        }
    }



    /**
     * Deletes an existing EmployeeInfo model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    // public function actionDelete($id)
    // {
    //     $this->findModel($id)->delete();

    //     return $this->redirect(['index']);
    // }

   /*  public function actionDelete($id)
    {
        if (Yii::$app->user->isGuest) {
            return $this->goHome();
        }
        /* this id is user id and it will delete from user table and
         * according to defined relations employee,employee info table data will
         * delete automatically.
         */
      /*  $userModel= User::findOne($id);
        $userModel->delete();

        return $this->redirect(['index']);
    }*/

    
   public function actionDelete($id){

        $model= EmployeeInfo::findOne($id);
        $model->is_active = '0';
        $model->save(); 
        if (!Yii::$app->request->isAjax) {
            return $this->redirect(['index']);
        } 
  
    }

    /**
     * Finds the EmployeeInfo model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return EmployeeInfo the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = EmployeeInfo::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }


    /*generate pdf biometric*/
    public function actionGeneratePdfEmpb(){
        if(Yii::$app->user->isGuest){
            return $this->redirect(['site/login']);
        }else{
            $query= User::find()
                ->select(['user.first_name','user.middle_name','user.last_name','user.id'])
                ->leftJoin('employee_info','employee_info.user_id = user.id')
                ->where(['user.fk_branch_id'=>Yii::$app->common->getBranch(),'user.fk_role_id'=>4,'employee_info.is_active'=>1])
                ->asArray()
                ->all();
            /*create employee biometric pdf*/
            $html =  $this->render('generate-pdf-empb',['query'=>$query]);
            $this->layout = 'pdf';
            $mpdf=new mPDF('','A4');
            $mpdf->WriteHTML($html);
            $mpdf->Output('Employees-biometric.pdf', 'D');
        }

    }

    //======== country 2 for admission============//
    public function actionCountry2(){

        $id=Yii::$app->request->post('id');
        $provinces=RefProvince::find()->where(['country_id'=>$id])->all();

            echo "<option selected='selected'>Select Provinces</option>";
            foreach($provinces as $province)
            {

                    echo "<option value='".$province->province_id."'>".$province->province_name."</option>";

            }


    }//end of country

    public function actionProvince2(){
        $id=Yii::$app->request->post('id');
        $District=RefDistrict::find()->where(['province_id'=>$id])->all();
        echo "<option selected='selected'>Select District</option>";
        foreach($District as $district)
        {
        echo "<option value='".$district->district_id."'>".$district->District_Name."</option>";
        } }//end of Province

    public function actionDistrict2(){

        $id=Yii::$app->request->post('id');
        $city=RefCities::find()->where(['district_id'=>$id])->all();

    echo "<option selected='selected'>Select City</option>";
    foreach($city as $city)
    {

            echo "<option value='".$city->city_id."'>".$city->city_name."</option>";

    }


    }//end of District

    //======== end of country 2============//

    /* biomatric of employee */

    public function actionBiomatric(){
        set_time_limit(0);
        $checkinOutTable=Checkinout::find()->where(['CHECKTYPE'=>'I'])->all();

        $msg=0;
        foreach ($checkinOutTable as $bio) {
                $model=new EmployeeAttendance();

            $userIds=$bio->USERID;
         //   echo '<br />';
            /*for the checking of existance of employee*/
            $employeeInfo=EmployeeInfo::find()->select('user_id')->where(['user_id'=>$userIds])->all();

            foreach ($employeeInfo as $empinf) {
            
            /*end of checking the existance of employee*/ 
       
                 $model->fk_empl_id=$empinf->user_id;
                 $model->date=$bio->CHECKTIME;
                 $model->leave_type='present';

        if($model->save()){
        }else{print_r($model->getErrors());}
            
        
    } // end of foreach

}

    if($msg == 0){
            echo "<h3 style='color:green'>Successfully inserted Employee biomatric attendance</h3>";

    }

        


      //  return $this->render('biomatric',['model'=>$model,'checkinOutTable'=>$checkinOutTable]);
     }

    /* end of biomatric employee */


} // end of class
